'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var _toConsumableArray = require('@babel/runtime/helpers/toConsumableArray');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var _toConsumableArray__default = /*#__PURE__*/_interopDefaultLegacy(_toConsumableArray);

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty__default["default"](e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function getImplementation(i18n) {
  var impl = {
    getResource: function getResource(lng, ns, key) {
      return i18n.getResource && i18n.getResource(lng, ns, key);
    },
    setResource: function setResource(lng, ns, key, value) {
      return i18n.addResource(lng, ns, key, value, {
        silent: true
      });
    },
    getResourceBundle: function getResourceBundle(lng, ns, cb) {
      i18n.loadNamespaces(ns, function () {
        cb(i18n.getResourceBundle(lng, ns));
      });
    },
    getDefaultNS: function getDefaultNS() {
      return i18n.options.defaultNS;
    },
    getLng: function getLng() {
      return i18n.resolvedLanguage || i18n.languages && i18n.languages[0] || i18n.options.lng;
    },
    getSourceLng: function getSourceLng() {
      var fallback = i18n.options.fallbackLng;
      if (typeof fallback === 'string') return fallback;
      if (Array.isArray(fallback)) return fallback[fallback.length - 1];
      if (fallback && fallback["default"]) {
        if (typeof fallback["default"] === 'string') return fallback;
        if (Array.isArray(fallback["default"])) {
          return fallback["default"][fallback["default"].length - 1];
        }
      }
      if (typeof fallback === 'function') {
        var res = fallback(i18n.resolvedLanguage);
        if (typeof res === 'string') return res;
        if (Array.isArray(res)) return res[res.length - 1];
      }
      return 'dev';
    },
    getLocizeDetails: function getLocizeDetails() {
      var backendName;
      if (i18n.services.backendConnector.backend && i18n.services.backendConnector.backend.options && i18n.services.backendConnector.backend.options.loadPath && i18n.services.backendConnector.backend.options.loadPath.indexOf('.locize.') > 0) {
        backendName = 'I18nextLocizeBackend';
      } else {
        backendName = i18n.services.backendConnector.backend ? i18n.services.backendConnector.backend.constructor.name : 'options.resources';
      }
      var opts = {
        backendName: backendName,
        sourceLng: impl.getSourceLng(),
        i18nFormat: i18n.options.compatibilityJSON === 'v3' ? 'i18next_v3' : 'i18next_v4',
        i18nFramework: 'i18next',
        isLocizify: i18n.options.isLocizify,
        defaultNS: i18n.options.defaultNS,
        targetLngs: _toConsumableArray__default["default"](new Set([].concat(i18n.options.preload, i18n.options.supportedLngs, [impl.getLng()]))).filter(function (l) {
          return l !== 'cimode' && l !== false && l !== 'false' && l !== undefined && l !== impl.getSourceLng();
        }),
        ns: _toConsumableArray__default["default"](new Set([].concat(i18n.options.ns, i18n.options.fallbackNS, i18n.options.defaultNS))).filter(function (n) {
          return n !== false && n !== 'false';
        })
      };
      if (!i18n.options.backend && !i18n.options.editor) return opts;
      var pickFrom = i18n.options.editor || i18n.options.backend;
      return _objectSpread(_objectSpread({}, opts), {}, {
        projectId: pickFrom.projectId,
        version: pickFrom.version
      });
    },
    bindLanguageChange: function bindLanguageChange(cb) {
      i18n.on('languageChanged', cb);
    },
    bindMissingKeyHandler: function bindMissingKeyHandler(cb) {
      i18n.options.missingKeyHandler = function (lng, ns, k, val, isUpdate, opts) {
        if (!isUpdate) cb(lng, ns, k, val);
      };
    },
    triggerRerender: function triggerRerender() {
      i18n.emit('editorSaved');
    }
  };
  return impl;
}

exports.getImplementation = getImplementation;
