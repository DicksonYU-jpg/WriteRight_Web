(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.i18nextSubliminal = {}));
})(this, (function (exports) { 'use strict';

  function _typeof(o) {
    "@babel/helpers - typeof";

    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
      return typeof o;
    } : function (o) {
      return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
    }, _typeof(o);
  }

  function toPrimitive(t, r) {
    if ("object" != _typeof(t) || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t, r);
      if ("object" != _typeof(i)) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t);
  }

  function toPropertyKey(t) {
    var i = toPrimitive(t, "string");
    return "symbol" == _typeof(i) ? i : i + "";
  }

  function _defineProperty(e, r, t) {
    return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
      value: t,
      enumerable: true,
      configurable: true,
      writable: true
    }) : e[r] = t, e;
  }

  var isBrowser = typeof window !== 'undefined';
  var INVISIBLE_CHARACTERS = isBrowser ? ["\u200C", "\u200D"] : ["\u200B", "\u200C"];
  var INVISIBLE_REGEX = RegExp("([".concat(INVISIBLE_CHARACTERS.join(''), "]{9})+"), 'gu');
  var TEMPLATE_MINIMUM_LENGTH = '{"k":"a"}'.length;
  var invisibleStartMarker = 'subliminal:start';
  var toBytes = function toBytes(text) {
    return Array.from(new TextEncoder().encode(text));
  };
  var fromBytes = function fromBytes(bytes) {
    return new TextDecoder().decode(new Uint8Array(bytes));
  };
  var padToWholeBytes = function padToWholeBytes(binary) {
    var needsToAdd = 8 - binary.length;
    return '0'.repeat(needsToAdd) + binary;
  };
  var encodeMessage = function encodeMessage(text) {
    var bytes = toBytes(text).map(Number);
    var binary = bytes.map(function (byte) {
      return padToWholeBytes(byte.toString(2)) + '0';
    }).join('');
    var result = Array.from(binary).map(function (b) {
      return INVISIBLE_CHARACTERS[Number(b)];
    }).join('');
    return result;
  };
  var encodedInvisibleStartMarker = encodeMessage(invisibleStartMarker) ;
  var decodeMessage = function decodeMessage(message) {
    var binary = Array.from(message).map(function (character) {
      return INVISIBLE_CHARACTERS.indexOf(character);
    }).map(String).join('');
    var textBytes = binary.match(/(.{9})/g);
    var codes = Uint8Array.from((textBytes === null || textBytes === void 0 ? void 0 : textBytes.map(function (byte) {
      return parseInt(byte.slice(0, 8), 2);
    })) || []);
    return fromBytes(codes);
  };
  var decodeFromText = function decodeFromText(text) {
    var _text$match;
    var invisibleMessages = (_text$match = text.match(INVISIBLE_REGEX)) === null || _text$match === void 0 ? void 0 : _text$match.filter(function (m) {
      return m.length > TEMPLATE_MINIMUM_LENGTH - 1;
    });
    if (!invisibleMessages || invisibleMessages.length === 0) return;
    return decodeMessage(invisibleMessages[invisibleMessages.length - 1]);
  };
  var removeInvisibles = function removeInvisibles(text) {
    return text.replace(INVISIBLE_REGEX, '');
  };
  var encodeValue = function encodeValue(data) {
    if (Object.keys(data).length === 0) return data;
    var value = {
      k: data.key,
      n: data.ns,
      l: data.lng,
      s: data.source
    };
    return JSON.stringify(value);
  };
  var decodeValue = function decodeValue(value) {
    if (!value || typeof value !== 'string' || value.indexOf('{') !== 0) return;
    try {
      var parsed = JSON.parse(value || '{}');
      return {
        key: parsed.k,
        ns: parsed.n,
        lng: parsed.l,
        source: parsed.s
      };
    } catch (e) {
      return undefined;
    }
  };
  function wrap(text) {
    var invisibleMeta = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var encodedValue = encodeValue(invisibleMeta);
    var invisibleMark = encodeMessage(encodedValue);
    return typeof text === 'string' && text ? encodedInvisibleStartMarker + text + invisibleMark : text;
  }
  function unwrap(text) {
    var encodedValue = decodeFromText(text);
    var decodedVal = decodeValue(encodedValue);
    var result = removeInvisibles(text);
    return {
      text: result,
      invisibleMeta: decodedVal
    };
  }
  function containsHiddenMeta(text) {
    if (!text || text.length < 27) return false;
    if (!INVISIBLE_REGEX.test(text)) return false;
    var lastByte = text.substring(text.length - 9);
    var lastChar = decodeMessage(lastByte);
    return lastChar === '}';
  }
  function containsHiddenStartMarker(text) {
    return text.startsWith(encodedInvisibleStartMarker);
  }

  function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
  function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), true).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
  var postProcessorName = 'subliminal';
  var SubliminalPostProcessor = {
    name: postProcessorName,
    type: 'postProcessor',
    options: {},
    setOptions: function setOptions(options) {
      this.options = _objectSpread(_objectSpread({}, options), this.options);
    },
    process: function process(value, keyIn, options, translator) {
      var opt = this.options = _objectSpread(_objectSpread({}, options), this.options);
      var key, ns, lng, source;
      if (options.i18nResolved) {
        key = options.i18nResolved.exactUsedKey;
        ns = options.i18nResolved.usedNS;
        lng = options.i18nResolved.usedLng;
        if (options.i18nResolved.res === undefined) {
          if (key !== value) {
            source = 'default';
          } else {
            source = 'key';
          }
        } else {
          source = 'translation';
        }
      } else {
        var _ref, _opt$keySeparator, _translator$options, _ref2, _namespaces$, _translator$options2;
        var keySeparator = (_ref = (_opt$keySeparator = opt.keySeparator) !== null && _opt$keySeparator !== void 0 ? _opt$keySeparator : translator === null || translator === void 0 || (_translator$options = translator.options) === null || _translator$options === void 0 ? void 0 : _translator$options.keySeparator) !== null && _ref !== void 0 ? _ref : '.';
        var _translator$extractFr = translator.extractFromKey(keyIn.join(keySeparator), options),
          extractedKey = _translator$extractFr.key,
          namespaces = _translator$extractFr.namespaces;
        key = extractedKey;
        ns = (_ref2 = (_namespaces$ = namespaces === null || namespaces === void 0 ? void 0 : namespaces[0]) !== null && _namespaces$ !== void 0 ? _namespaces$ : opt.ns) !== null && _ref2 !== void 0 ? _ref2 : translator === null || translator === void 0 || (_translator$options2 = translator.options) === null || _translator$options2 === void 0 ? void 0 : _translator$options2.defaultNS;
        lng = options.lng || this.language;
        if (key === value) {
          source = 'key';
        } else {
          source = 'translation';
        }
      }
      return wrap(value, {
        key: key,
        ns: ns,
        lng: lng,
        source: source
      });
    },
    overloadTranslationOptionHandler: function overloadTranslationOptionHandler() {
      return {
        postProcess: postProcessorName,
        postProcessPassResolved: true
      };
    }
  };

  var index = {
    wrap: wrap,
    unwrap: unwrap,
    containsHiddenMeta: containsHiddenMeta,
    containsHiddenStartMarker: containsHiddenStartMarker,
    PostProcessor: SubliminalPostProcessor,
    plugin: SubliminalPostProcessor
  };

  exports.PostProcessor = SubliminalPostProcessor;
  exports.containsHiddenMeta = containsHiddenMeta;
  exports.containsHiddenStartMarker = containsHiddenStartMarker;
  exports.default = index;
  exports.plugin = SubliminalPostProcessor;
  exports.unwrap = unwrap;
  exports.wrap = wrap;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
